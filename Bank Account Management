using System;

namespace Portfolio
{
    public class BankAccount
    {
        private decimal balance;
        public string AccountNumber { get; private set; }

        public BankAccount(string accountNumber, decimal initialBalance)
        {
            if (string.IsNullOrEmpty(accountNumber)) throw new ArgumentException("Account number cannot be empty.");
            if (initialBalance < 0) throw new ArgumentException("Initial balance cannot be negative.");
            AccountNumber = accountNumber;
            balance = initialBalance;
        }

        public void Deposit(decimal amount)
        {
            if (amount <= 0) throw new ArgumentException("Deposit amount must be positive.");
            balance += amount;
            Console.WriteLine($"Deposited {amount:C}. New balance: {balance:C}");
        }

        public bool Withdraw(decimal amount)
        {
            if (amount <= 0) throw new ArgumentException("Withdrawal amount must be positive.");
            if (amount > balance)
            {
                Console.WriteLine("Insufficient funds.");
                return false;
            }
            balance -= amount;
            Console.WriteLine($"Withdrawn {amount:C}. New balance: {balance:C}");
            return true;
        }

        public decimal GetBalance() => balance;
    }

    class Program
    {
        static void Main()
        {
            try
            {
                var account = new BankAccount("12345", 1000);
                account.Deposit(500);
                account.Withdraw(200);
                account.Withdraw(2000); // Test insufficient funds
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }
}
